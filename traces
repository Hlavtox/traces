#!/usr/bin/env php
<?php
/**
 * A simple CLI tool to generate information about GitHub contributors of a repository.
 *
 * @author PrestaShop SA <contact@prestashop.com>
 * @author MickaÃ«l Andrieu <andrieu.travail@gmail.com>
 */

function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}

if ((!$loader = includeIfExists(__DIR__ . '/vendor/autoload.php')) && (!$loader = includeIfExists(
        __DIR__ . '/../../autoload.php'
    ))) {
    die(
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

use GuzzleHttp\Client;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Yaml\Yaml;

const GITHUB_CONTRIBUTORS_POINT = 'https://api.github.com/repos/{repository}/contributors';
const GITHUB_REPOSITORIES_POINT = 'https://api.github.com/orgs/{organization}/repos';
const GITHUB_USERS_POINT = 'https://api.github.com/users/{login}';
const REGEX = '/=([[:digit:]]+)>; rel="last"/';

/**
 * Fetch repositories from an organization
 * @param SymfonyStyle $io
 * @param Client $client
 * @param array $authHeaders
 * @param array $excludeRepositories
 * @param string $organization
 * @return array
 */
function fetchOrganizationRepositories(
    SymfonyStyle $io,
    Client $client,
    array $authHeaders,
    array $excludeRepositories,
    string $organization
): array {
    $orgRepositories = [];

    $requestUri = str_replace('{organization}', $organization, GITHUB_REPOSITORIES_POINT);
    $response = $client->get($requestUri, $authHeaders);
    if ($response->getStatusCode() !== 200) {
        return $orgRepositories;
    }

    // Number of pages
    if ($response->hasHeader('Link')) {
        $headerValue = $response->getHeader('Link')[0];
        preg_match(REGEX, $headerValue, $matches);
        $nbPages = $matches[1];
    } else {
        $nbPages = 1;
    }

    // Fetch pages
    $io->progressStart($nbPages);
    for ($i = 1; $i <= $nbPages; $i++) {
        $response = $client->get($requestUri . '?page=' . $i, $authHeaders);
        $repositories = json_decode($response->getBody(), true);
        foreach ($repositories as $repository) {
            if ($repository['archived'] || $repository['private'] || $repository['fork']) {
                continue;
            }
            if (in_array($repository['full_name'], $excludeRepositories)) {
                continue;
            }
            $orgRepositories[] = $repository['full_name'];
        }
        $io->progressAdvance();
    }
    $io->progressFinish();

    return $orgRepositories;
}

/**
 * @param Client $client
 * @param array $authHeaders
 * @param string $repository
 * @return array
 */
function fetchRepositoryContributors(
    Client $client,
    array $authHeaders,
    string $repository
) {
    $contributors = [];
    $requestUri = str_replace('{repository}', $repository, GITHUB_CONTRIBUTORS_POINT);
    $response = $client->get($requestUri, $authHeaders);
    if ($response->getStatusCode() !== 200) {
        return $contributors;
    }
    if ($response->hasHeader('Link')) {
        $headerValue = $response->getHeader('Link')[0];
        preg_match(REGEX, $headerValue, $matches);
        $nbPages = $matches[1];
    } else {
        $nbPages = 1;
    }

    for ($i = 1; $i <= $nbPages; $i++) {
        $response = $client->get($requestUri . '?page=' . $i, $authHeaders);
        $contributors = array_merge(
            $contributors,
            json_decode($response->getBody(), true)
        );
    }
    return $contributors;
}

/**
 * @param string $file
 * @return array
 */
function fetchConfiguration(string $file): array {
    if (empty($file)) {
        return [];
    }
    if (!file_exists($file) || !is_readable($file)) {
        throw new RuntimeException(sprintf('File "%s" doesn\'t exist or is not readable', $file));
    }
    $config = Yaml::parse(file_get_contents($file))['config'] ?? [];

    return [
        $config['exclusions'] ?? [],
        $config['keepExcludedUsers'] ?? false,
        $config['extractEmailDomain'] ?? false,
        $config['fieldsWhitelist'] ? array_flip($config['fieldsWhitelist']) : [],
        $config['excludeRepositories'] ?? [],
    ];
}

(new Application('traces', '5.1.0'))
    ->register('traces')
    ->setDescription('A simple CLI tool to generate information about GitHub contributors of an organization.')
    ->addOption('user', 'u', InputOption::VALUE_REQUIRED, 'GitHub username, for instance `johndoe`')
    ->addOption('password', 'p', InputOption::VALUE_OPTIONAL, 'GitHub password, for instance `secr3tSt0rY`', '')
    ->addOption('organization', 'o',InputOption::VALUE_OPTIONAL, 'GitHub organization')
    ->addOption('repository', 'r', InputOption::VALUE_OPTIONAL, 'GitHub repository')
    ->addOption('config', 'c', InputOption::VALUE_REQUIRED, 'Configuration file, for exclusions')
    ->addOption('timeout', 't', InputOption::VALUE_REQUIRED, 'Request timeout, in seconds', 2.0)
    ->setCode(
        function (InputInterface $input, OutputInterface $output) {
            $io = new SymfonyStyle($input, $output);

            $user = $input->getOption('user');
            $password = $input->getOption('password');
            $organization = $input->getOption('organization');
            $repository = $input->getOption('repository');
            $configFile = $input->getOption('config');
            $timeout = $input->getOption('timeout');

            if (empty($organization) && empty($repository)) {
                $io->warning('Please define organization (-o/--organization) or repository (-r/--repository) option');
                return;
            }

            // load settings from configuration file
            list(
                $confExclusions,
                $confKeepExcludedUsers,
                $confExtractEmailDomain,
                $confFieldsWhitelist,
                $confExcludeRepositories
            ) = fetchConfiguration($configFile);

            $authHeaders = ['auth' => [$user, $password]];
            $client = new Client(['timeout' => $timeout,]);

            if (!empty($repository)) {
                $orgRepositories = [$repository];
            } else {
                $io->text('Loading repositories...');
                $orgRepositories = fetchOrganizationRepositories(
                    $io,
                    $client,
                    $authHeaders,
                    $confExcludeRepositories,
                    $organization
                );
            }

            $io->text('Loading contributors...');

            $users = [];
            $io->progressStart(count($orgRepositories));
            foreach ($orgRepositories as $repository) {
                $contributors = fetchRepositoryContributors($client, $authHeaders, $repository);
                foreach ($contributors as $contributor) {
                    // skip user if excluded
                    if (!$confKeepExcludedUsers && in_array($contributor['login'], $confExclusions, true)) {
                        continue;
                    }
                    if (!array_key_exists($contributor['login'], $users)) {
                        $userRequestUri = str_replace('{login}', $contributor['login'], GITHUB_USERS_POINT);
                        $response = $client->get($userRequestUri, $authHeaders);
                        $user = json_decode($response->getBody(), true);
                        $userEmail = $user['email'];

                        // Clean up response if whitelist is defined
                        if (!empty($confFieldsWhitelist)) {
                            $user = array_intersect_key($user, $confFieldsWhitelist);
                        }

                        // Add mail domain if setting enabled
                        if ($confExtractEmailDomain) {
                            $user['email_domain'] = empty($userEmail)
                                ? ''
                                : substr($userEmail, strpos($userEmail, '@') + 1);
                        }

                        // add exclusion property if setting enabled
                        if ($confKeepExcludedUsers) {
                            $user['excluded'] = in_array($contributor['login'], $confExclusions, true);
                        }

                        $user['contributions'] = 0;
                        $user['repositories'] = [];

                        $users[$contributor['login']] = $user;
                    }
                    $users[$contributor['login']]['contributions'] += $contributor['contributions'];
                    $users[$contributor['login']]['repositories'][$repository] = $contributor['contributions'];
                }
                $io->progressAdvance();
            }
            $io->progressFinish();

            if (!empty($organization)) {
                $io->success(sprintf('%s contributors found for the organization "%s".', count($users), $organization));
            } else {
                $io->success(sprintf('%s contributors found for the repository "%s".', count($users), $repository));
            }

            usort($users, function($userA, $userB) {
                if ($userA['contributions'] == $userB['contributions']) {
                    return 0;
                }
                return ($userA['contributions'] > $userB['contributions']) ? -1 : 1;
            });
            $users['updatedAt'] = date('Y-m-d H:i:s');

            $io->text('Writing to file...');
            $fs = new Filesystem();
            $fs->dumpFile('contributors.js', json_encode($users, JSON_PRETTY_PRINT));
        }
    )
    ->getApplication()
    ->setDefaultCommand('traces', true)
    ->run();
