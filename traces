#!/usr/bin/env php
<?php
/**
 * A simple CLI tool to generate information about GitHub contributors of a repository.
 *
 * @author PrestaShop SA <contact@prestashop.com>
 * @author MickaÃ«l Andrieu <andrieu.travail@gmail.com>
 */

function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}

if ((!$loader = includeIfExists(__DIR__ . '/vendor/autoload.php')) && (!$loader = includeIfExists(
        __DIR__ . '/../../autoload.php'
    ))) {
    die(
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Yaml\Yaml;

use GuzzleHttp\Client;

const GITHUB_CONTRIBUTORS_POINT = 'https://api.github.com/repos/{repository}/contributors';
const GITHUB_USERS_POINT = 'https://api.github.com/users/{login}';
const REGEX = '/=([[:digit:]]+)>; rel="last"/';

(new Application('traces', '1.1.1'))
    ->register('traces')
    ->setDescription('A simple CLI tool to generate information about GitHub contributors of a repository.')
    ->addArgument('repository', InputArgument::REQUIRED, 'GitHub repository, for instance PrestaShop/PrestaShop')
    ->addArgument('user', InputArgument::REQUIRED, 'GitHub username, for instance `johndoe`')
    ->addArgument('password', InputArgument::REQUIRED, 'GitHub password, for instance `secr3tSt0rY`')
    ->addOption('config', 'c', InputOption::VALUE_REQUIRED, 'Configuration file, for exclusions')
    ->addOption('timeout', 't', InputOption::VALUE_REQUIRED, 'Request timeout, in seconds', 2.0)
    ->setCode(
        function (InputInterface $input, OutputInterface $output) {
            $io = new SymfonyStyle($input, $output);

            $repository = $input->getArgument('repository');
            $user = $input->getArgument('user');
            $password = $input->getArgument('password');

            $configFile = $input->getOption('config');
            $timeout = $input->getOption('timeout');

            // load settings from configuration file
            list(
                $exclusions,
                $keepExcludedUsers,
                $extractEmailDomain,
                $fieldsWhitelist
            ) = (function ($file) {
                if (empty($file)) {
                    return [];
                }
                if (!file_exists($file) || !is_readable($file)) {
                    throw new RuntimeException(sprintf('File "%s" doesn\'t exist or is not readable', $file));
                }
                $config = Yaml::parse(file_get_contents($file))['config'] ?? [];

                return [
                    $config['exclusions'] ?? [],
                    $config['keepExcludedUsers'] ?? false,
                    $config['extractEmailDomain'] ?? false,
                    $config['fieldsWhitelist'] ? array_flip($config['fieldsWhitelist']) : [],
                ];
            })(
                $configFile
            );

            $authHeaders = ['auth' => [$user, $password]];
            $requestUri = str_replace('{repository}', $repository, GITHUB_CONTRIBUTORS_POINT);

            $client = new Client(['timeout' => $timeout,]);

            $io->text('Loading contributors...');
            $response = $client->get($requestUri);

            if ('application/json; charset=utf-8' === $response->getHeader('Content-Type')[0]) {
                if ($response->hasHeader('Link')) {
                    $headerValue = $response->getHeader('Link')[0];
                    preg_match(REGEX, $headerValue, $matches);
                    $nbPages = $matches[1];
                    $users = [];

                    $io->progressStart($nbPages);

                    for ($i = 1; $i <= $nbPages; $i++) {
                        $response = $client->get($requestUri . '?page=' . $i, $authHeaders);
                        $contributors = json_decode($response->getBody(), true);

                        foreach ($contributors as $contributor) {
                            // skip user if excluded
                            if (!$keepExcludedUsers && in_array($contributor['login'], $exclusions, true)) {
                                continue;
                            }
                            $userRequestUri = str_replace('{login}', $contributor['login'], GITHUB_USERS_POINT);
                            $response = $client->get($userRequestUri, $authHeaders);

                            $user = json_decode($response->getBody(), true);

                            // extract mail domain
                            $userEmailDomain = '';
                            if ($extractEmailDomain && !empty($user['email'])) {
                               $userEmailDomain = substr($user['email'], strpos($user['email'], '@') + 1);
                            }

                            // clean up response if whitelist is defined
                            if (!empty($fieldsWhitelist)) {
                                $user = array_intersect_key($user, $fieldsWhitelist);
                            }

                            // add exclusion property if setting enabled
                            if ($keepExcludedUsers) {
                                $user['excluded'] = in_array($contributor['login'], $exclusions, true);
                            }

                            // add mail domain if setting enabled
                            if ($extractEmailDomain) {
                                $user['email_domain'] = $userEmailDomain;
                            }

                            $user['contributions'] = $contributor['contributions'];

                            $users[] = $user;
                        }

                        $io->progressAdvance(1);
                    }

                    $io->progressFinish();

                    $io->text('Writing to file...');

                    $fs = new Filesystem();
                    $fs->dumpFile('contributors.js', json_encode($users, JSON_PRETTY_PRINT));
                }
            }

            $io->success(sprintf('%s contributors found for the repository "%s".', count($users), $repository));
        }
    )
    ->getApplication()
    ->setDefaultCommand('traces', true)
    ->run();
